// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: announcement/v1/type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Announcement_V1_AnnouncementTag: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case information // = 1
    case notification // = 2
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .information
        case 2: self = .notification
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .information: return 1
        case .notification: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Announcement_V1_AnnouncementTag] = [
        .unspecified,
        .information,
        .notification,
    ]
}

/// If authenticated, is_read is present.
public struct Announcement_V1_Announcement: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Shared_UUID {
        get { return _id ?? Shared_UUID() }
        set { _id = newValue }
    }

    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool { return self._id != nil }
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() { self._id = nil }

    public var tags: [Announcement_V1_AnnouncementTag] = []

    public var title: String = String()

    public var content: String = String()

    public var publishedAt: Shared_RFC3339DateTime {
        get { return _publishedAt ?? Shared_RFC3339DateTime() }
        set { _publishedAt = newValue }
    }

    /// Returns true if `publishedAt` has been explicitly set.
    public var hasPublishedAt: Bool { return self._publishedAt != nil }
    /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
    public mutating func clearPublishedAt() { self._publishedAt = nil }

    public var isRead: Bool {
        get { return _isRead ?? false }
        set { _isRead = newValue }
    }

    /// Returns true if `isRead` has been explicitly set.
    public var hasIsRead: Bool { return self._isRead != nil }
    /// Clears the value of `isRead`. Subsequent reads from it will return its default value.
    public mutating func clearIsRead() { self._isRead = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: Shared_UUID? = nil
    fileprivate var _publishedAt: Shared_RFC3339DateTime? = nil
    fileprivate var _isRead: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "announcement.v1"

extension Announcement_V1_AnnouncementTag: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "ANNOUNCEMENT_TAG_UNSPECIFIED"),
        1: .same(proto: "ANNOUNCEMENT_TAG_INFORMATION"),
        2: .same(proto: "ANNOUNCEMENT_TAG_NOTIFICATION"),
    ]
}

extension Announcement_V1_Announcement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Announcement"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "tags"),
        3: .same(proto: "title"),
        4: .same(proto: "content"),
        5: .standard(proto: "published_at"),
        6: .standard(proto: "is_read"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &self._id)
            case 2: try decoder.decodeRepeatedEnumField(value: &self.tags)
            case 3: try decoder.decodeSingularStringField(value: &self.title)
            case 4: try decoder.decodeSingularStringField(value: &self.content)
            case 5: try decoder.decodeSingularMessageField(value: &self._publishedAt)
            case 6: try decoder.decodeSingularBoolField(value: &self._isRead)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._id {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !self.tags.isEmpty {
            try visitor.visitPackedEnumField(value: self.tags, fieldNumber: 2)
        }
        if !self.title.isEmpty {
            try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
        }
        if !self.content.isEmpty {
            try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
        }
        try { if let v = self._publishedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._isRead {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Announcement_V1_Announcement, rhs: Announcement_V1_Announcement) -> Bool {
        if lhs._id != rhs._id { return false }
        if lhs.tags != rhs.tags { return false }
        if lhs.title != rhs.title { return false }
        if lhs.content != rhs.content { return false }
        if lhs._publishedAt != rhs._publishedAt { return false }
        if lhs._isRead != rhs._isRead { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
