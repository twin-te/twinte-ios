// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: schoolcalendar/v1/type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Schoolcalendar_V1_EventType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case holiday // = 1
    case publicHoliday // = 2
    case exam // = 3
    case substituteDay // = 4
    case other // = 5
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .holiday
        case 2: self = .publicHoliday
        case 3: self = .exam
        case 4: self = .substituteDay
        case 5: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .holiday: return 1
        case .publicHoliday: return 2
        case .exam: return 3
        case .substituteDay: return 4
        case .other: return 5
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Schoolcalendar_V1_EventType] = [
        .unspecified,
        .holiday,
        .publicHoliday,
        .exam,
        .substituteDay,
        .other,
    ]
}

public enum Schoolcalendar_V1_Module: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case springA // = 1
    case springB // = 2
    case springC // = 3
    case summerVacation // = 4
    case fallA // = 5
    case fallB // = 6
    case winterVacation // = 7
    case fallC // = 8
    case springVacation // = 9
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .springA
        case 2: self = .springB
        case 3: self = .springC
        case 4: self = .summerVacation
        case 5: self = .fallA
        case 6: self = .fallB
        case 7: self = .winterVacation
        case 8: self = .fallC
        case 9: self = .springVacation
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .springA: return 1
        case .springB: return 2
        case .springC: return 3
        case .summerVacation: return 4
        case .fallA: return 5
        case .fallB: return 6
        case .winterVacation: return 7
        case .fallC: return 8
        case .springVacation: return 9
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Schoolcalendar_V1_Module] = [
        .unspecified,
        .springA,
        .springB,
        .springC,
        .summerVacation,
        .fallA,
        .fallB,
        .winterVacation,
        .fallC,
        .springVacation,
    ]
}

public struct Schoolcalendar_V1_Event: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int32 = 0

    public var type: Schoolcalendar_V1_EventType = .unspecified

    public var date: Shared_RFC3339FullDate {
        get { return _date ?? Shared_RFC3339FullDate() }
        set { _date = newValue }
    }

    /// Returns true if `date` has been explicitly set.
    public var hasDate: Bool { return self._date != nil }
    /// Clears the value of `date`. Subsequent reads from it will return its default value.
    public mutating func clearDate() { self._date = nil }

    public var description_p: String = String()

    public var changeTo: Shared_Weekday {
        get { return _changeTo ?? .unspecified }
        set { _changeTo = newValue }
    }

    /// Returns true if `changeTo` has been explicitly set.
    public var hasChangeTo: Bool { return self._changeTo != nil }
    /// Clears the value of `changeTo`. Subsequent reads from it will return its default value.
    public mutating func clearChangeTo() { self._changeTo = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _date: Shared_RFC3339FullDate? = nil
    fileprivate var _changeTo: Shared_Weekday? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "schoolcalendar.v1"

extension Schoolcalendar_V1_EventType: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "EVENT_TYPE_UNSPECIFIED"),
        1: .same(proto: "EVENT_TYPE_HOLIDAY"),
        2: .same(proto: "EVENT_TYPE_PUBLIC_HOLIDAY"),
        3: .same(proto: "EVENT_TYPE_EXAM"),
        4: .same(proto: "EVENT_TYPE_SUBSTITUTE_DAY"),
        5: .same(proto: "EVENT_TYPE_OTHER"),
    ]
}

extension Schoolcalendar_V1_Module: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MODULE_UNSPECIFIED"),
        1: .same(proto: "MODULE_SPRING_A"),
        2: .same(proto: "MODULE_SPRING_B"),
        3: .same(proto: "MODULE_SPRING_C"),
        4: .same(proto: "MODULE_SUMMER_VACATION"),
        5: .same(proto: "MODULE_FALL_A"),
        6: .same(proto: "MODULE_FALL_B"),
        7: .same(proto: "MODULE_WINTER_VACATION"),
        8: .same(proto: "MODULE_FALL_C"),
        9: .same(proto: "MODULE_SPRING_VACATION"),
    ]
}

extension Schoolcalendar_V1_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Event"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "type"),
        3: .same(proto: "date"),
        4: .same(proto: "description"),
        5: .standard(proto: "change_to"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &self.id)
            case 2: try decoder.decodeSingularEnumField(value: &self.type)
            case 3: try decoder.decodeSingularMessageField(value: &self._date)
            case 4: try decoder.decodeSingularStringField(value: &self.description_p)
            case 5: try decoder.decodeSingularEnumField(value: &self._changeTo)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if self.id != 0 {
            try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
        }
        if self.type != .unspecified {
            try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
        }
        try { if let v = self._date {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        if !self.description_p.isEmpty {
            try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
        }
        try { if let v = self._changeTo {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Schoolcalendar_V1_Event, rhs: Schoolcalendar_V1_Event) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.type != rhs.type { return false }
        if lhs._date != rhs._date { return false }
        if lhs.description_p != rhs.description_p { return false }
        if lhs._changeTo != rhs._changeTo { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
