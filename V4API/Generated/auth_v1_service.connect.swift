// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: auth/v1/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// The following error codes are not stated explicitly in the each rpc, but may be returned.
///   - shared.InvalidArgument
///   - shared.Unauthenticated
///   - shared.Unauthorized
public protocol Auth_V1_AuthServiceClientInterface: Sendable {
    @discardableResult
    func getMe(request: Auth_V1_GetMeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetMeResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func getMe(request: Auth_V1_GetMeRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_GetMeResponse>

    @discardableResult
    func deleteUserAuthentication(request: Auth_V1_DeleteUserAuthenticationRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_DeleteUserAuthenticationResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func deleteUserAuthentication(request: Auth_V1_DeleteUserAuthenticationRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_DeleteUserAuthenticationResponse>

    @discardableResult
    func deleteAccount(request: Auth_V1_DeleteAccountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_DeleteAccountResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func deleteAccount(request: Auth_V1_DeleteAccountRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_DeleteAccountResponse>
}

/// Concrete implementation of `Auth_V1_AuthServiceClientInterface`.
public final class Auth_V1_AuthServiceClient: Auth_V1_AuthServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func getMe(request: Auth_V1_GetMeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetMeResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/GetMe", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func getMe(request: Auth_V1_GetMeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_GetMeResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/GetMe", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func deleteUserAuthentication(request: Auth_V1_DeleteUserAuthenticationRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_DeleteUserAuthenticationResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/DeleteUserAuthentication", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func deleteUserAuthentication(request: Auth_V1_DeleteUserAuthenticationRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_DeleteUserAuthenticationResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/DeleteUserAuthentication", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func deleteAccount(request: Auth_V1_DeleteAccountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_DeleteAccountResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/DeleteAccount", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func deleteAccount(request: Auth_V1_DeleteAccountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_DeleteAccountResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/DeleteAccount", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getMe = Connect.MethodSpec(name: "GetMe", service: "auth.v1.AuthService", type: .unary)
            public static let deleteUserAuthentication = Connect.MethodSpec(name: "DeleteUserAuthentication", service: "auth.v1.AuthService", type: .unary)
            public static let deleteAccount = Connect.MethodSpec(name: "DeleteAccount", service: "auth.v1.AuthService", type: .unary)
        }
    }
}
