// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: donation/v1/type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Donation_V1_PaymentType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case oneTime // = 1
    case subscription // = 2
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .oneTime
        case 2: self = .subscription
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .oneTime: return 1
        case .subscription: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Donation_V1_PaymentType] = [
        .unspecified,
        .oneTime,
        .subscription,
    ]
}

public enum Donation_V1_PaymentStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case pending // = 1
    case canceled // = 2
    case succeeded // = 3
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .pending
        case 2: self = .canceled
        case 3: self = .succeeded
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .pending: return 1
        case .canceled: return 2
        case .succeeded: return 3
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Donation_V1_PaymentStatus] = [
        .unspecified,
        .pending,
        .canceled,
        .succeeded,
    ]
}

public struct Donation_V1_PaymentUser: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var userID: Shared_UUID {
        get { return _userID ?? Shared_UUID() }
        set { _userID = newValue }
    }

    /// Returns true if `userID` has been explicitly set.
    public var hasUserID: Bool { return self._userID != nil }
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    public mutating func clearUserID() { self._userID = nil }

    public var displayName: String {
        get { return _displayName ?? String() }
        set { _displayName = newValue }
    }

    /// Returns true if `displayName` has been explicitly set.
    public var hasDisplayName: Bool { return self._displayName != nil }
    /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
    public mutating func clearDisplayName() { self._displayName = nil }

    public var link: String {
        get { return _link ?? String() }
        set { _link = newValue }
    }

    /// Returns true if `link` has been explicitly set.
    public var hasLink: Bool { return self._link != nil }
    /// Clears the value of `link`. Subsequent reads from it will return its default value.
    public mutating func clearLink() { self._link = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _userID: Shared_UUID? = nil
    fileprivate var _displayName: String? = nil
    fileprivate var _link: String? = nil
}

public struct Donation_V1_PaymentHistory: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var type: Donation_V1_PaymentType = .unspecified

    public var status: Donation_V1_PaymentStatus = .unspecified

    public var amount: Int32 = 0

    public var createdAt: Shared_RFC3339DateTime {
        get { return _createdAt ?? Shared_RFC3339DateTime() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    public var hasCreatedAt: Bool { return self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    public mutating func clearCreatedAt() { self._createdAt = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _createdAt: Shared_RFC3339DateTime? = nil
}

public struct Donation_V1_SubscriptionPlan: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var name: String = String()

    public var amount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Donation_V1_Subscription: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var plan: Donation_V1_SubscriptionPlan {
        get { return _plan ?? Donation_V1_SubscriptionPlan() }
        set { _plan = newValue }
    }

    /// Returns true if `plan` has been explicitly set.
    public var hasPlan: Bool { return self._plan != nil }
    /// Clears the value of `plan`. Subsequent reads from it will return its default value.
    public mutating func clearPlan() { self._plan = nil }

    public var isActive: Bool = false

    public var createdAt: Shared_RFC3339DateTime {
        get { return _createdAt ?? Shared_RFC3339DateTime() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    public var hasCreatedAt: Bool { return self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    public mutating func clearCreatedAt() { self._createdAt = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _plan: Donation_V1_SubscriptionPlan? = nil
    fileprivate var _createdAt: Shared_RFC3339DateTime? = nil
}

public struct Donation_V1_Contributor: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var displayName: String = String()

    public var link: String {
        get { return _link ?? String() }
        set { _link = newValue }
    }

    /// Returns true if `link` has been explicitly set.
    public var hasLink: Bool { return self._link != nil }
    /// Clears the value of `link`. Subsequent reads from it will return its default value.
    public mutating func clearLink() { self._link = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _link: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "donation.v1"

extension Donation_V1_PaymentType: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PAYMENT_TYPE_UNSPECIFIED"),
        1: .same(proto: "PAYMENT_TYPE_ONE_TIME"),
        2: .same(proto: "PAYMENT_TYPE_SUBSCRIPTION"),
    ]
}

extension Donation_V1_PaymentStatus: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PAYMENT_STATUS_UNSPECIFIED"),
        1: .same(proto: "PAYMENT_STATUS_PENDING"),
        2: .same(proto: "PAYMENT_STATUS_CANCELED"),
        3: .same(proto: "PAYMENT_STATUS_SUCCEEDED"),
    ]
}

extension Donation_V1_PaymentUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PaymentUser"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .standard(proto: "user_id"),
        3: .standard(proto: "display_name"),
        4: .same(proto: "link"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.id)
            case 2: try decoder.decodeSingularMessageField(value: &self._userID)
            case 3: try decoder.decodeSingularStringField(value: &self._displayName)
            case 4: try decoder.decodeSingularStringField(value: &self._link)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.id.isEmpty {
            try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
        }
        try { if let v = self._userID {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._displayName {
            try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._link {
            try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Donation_V1_PaymentUser, rhs: Donation_V1_PaymentUser) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs._userID != rhs._userID { return false }
        if lhs._displayName != rhs._displayName { return false }
        if lhs._link != rhs._link { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Donation_V1_PaymentHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PaymentHistory"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "type"),
        3: .same(proto: "status"),
        4: .same(proto: "amount"),
        5: .standard(proto: "created_at"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.id)
            case 2: try decoder.decodeSingularEnumField(value: &self.type)
            case 3: try decoder.decodeSingularEnumField(value: &self.status)
            case 4: try decoder.decodeSingularInt32Field(value: &self.amount)
            case 5: try decoder.decodeSingularMessageField(value: &self._createdAt)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.id.isEmpty {
            try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
        }
        if self.type != .unspecified {
            try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
        }
        if self.status != .unspecified {
            try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
        }
        if self.amount != 0 {
            try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 4)
        }
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Donation_V1_PaymentHistory, rhs: Donation_V1_PaymentHistory) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.type != rhs.type { return false }
        if lhs.status != rhs.status { return false }
        if lhs.amount != rhs.amount { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Donation_V1_SubscriptionPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SubscriptionPlan"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "name"),
        3: .same(proto: "amount"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.id)
            case 2: try decoder.decodeSingularStringField(value: &self.name)
            case 3: try decoder.decodeSingularInt32Field(value: &self.amount)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.id.isEmpty {
            try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
        }
        if !self.name.isEmpty {
            try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
        }
        if self.amount != 0 {
            try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Donation_V1_SubscriptionPlan, rhs: Donation_V1_SubscriptionPlan) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.name != rhs.name { return false }
        if lhs.amount != rhs.amount { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Donation_V1_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Subscription"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "plan"),
        3: .standard(proto: "is_active"),
        4: .standard(proto: "created_at"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.id)
            case 2: try decoder.decodeSingularMessageField(value: &self._plan)
            case 3: try decoder.decodeSingularBoolField(value: &self.isActive)
            case 4: try decoder.decodeSingularMessageField(value: &self._createdAt)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.id.isEmpty {
            try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
        }
        try { if let v = self._plan {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if self.isActive != false {
            try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 3)
        }
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Donation_V1_Subscription, rhs: Donation_V1_Subscription) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs._plan != rhs._plan { return false }
        if lhs.isActive != rhs.isActive { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Donation_V1_Contributor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Contributor"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "display_name"),
        2: .same(proto: "link"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.displayName)
            case 2: try decoder.decodeSingularStringField(value: &self._link)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.displayName.isEmpty {
            try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
        }
        try { if let v = self._link {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Donation_V1_Contributor, rhs: Donation_V1_Contributor) -> Bool {
        if lhs.displayName != rhs.displayName { return false }
        if lhs._link != rhs._link { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
