// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: timetable/v1/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// The following error codes are not stated explicitly in the each rpc, but may be returned.
///   - shared.InvalidArgument
///   - shared.Unauthenticated
///   - shared.Unauthorized
public protocol Timetable_V1_TimetableServiceClientInterface: Sendable {
    @discardableResult
    func listCoursesByCodes(request: Timetable_V1_ListCoursesByCodesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListCoursesByCodesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listCoursesByCodes(request: Timetable_V1_ListCoursesByCodesRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_ListCoursesByCodesResponse>

    @discardableResult
    func searchCourses(request: Timetable_V1_SearchCoursesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_SearchCoursesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func searchCourses(request: Timetable_V1_SearchCoursesRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_SearchCoursesResponse>

    @discardableResult
    func createRegisteredCoursesByCodes(request: Timetable_V1_CreateRegisteredCoursesByCodesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateRegisteredCoursesByCodesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func createRegisteredCoursesByCodes(request: Timetable_V1_CreateRegisteredCoursesByCodesRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_CreateRegisteredCoursesByCodesResponse>

    @discardableResult
    func createRegisteredCourseManually(request: Timetable_V1_CreateRegisteredCourseManuallyRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateRegisteredCourseManuallyResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func createRegisteredCourseManually(request: Timetable_V1_CreateRegisteredCourseManuallyRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_CreateRegisteredCourseManuallyResponse>

    @discardableResult
    func listRegisteredCourses(request: Timetable_V1_ListRegisteredCoursesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListRegisteredCoursesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listRegisteredCourses(request: Timetable_V1_ListRegisteredCoursesRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_ListRegisteredCoursesResponse>

    @discardableResult
    func updateRegisteredCourse(request: Timetable_V1_UpdateRegisteredCourseRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_UpdateRegisteredCourseResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func updateRegisteredCourse(request: Timetable_V1_UpdateRegisteredCourseRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_UpdateRegisteredCourseResponse>

    @discardableResult
    func deleteRegisteredCourse(request: Timetable_V1_DeleteRegisteredCourseRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_DeleteRegisteredCourseResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func deleteRegisteredCourse(request: Timetable_V1_DeleteRegisteredCourseRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_DeleteRegisteredCourseResponse>

    @discardableResult
    func createTag(request: Timetable_V1_CreateTagRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateTagResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func createTag(request: Timetable_V1_CreateTagRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_CreateTagResponse>

    @discardableResult
    func listTags(request: Timetable_V1_ListTagsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListTagsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listTags(request: Timetable_V1_ListTagsRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_ListTagsResponse>

    @discardableResult
    func updateTag(request: Timetable_V1_UpdateTagRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_UpdateTagResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func updateTag(request: Timetable_V1_UpdateTagRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_UpdateTagResponse>

    @discardableResult
    func deleteTag(request: Timetable_V1_DeleteTagRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_DeleteTagResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func deleteTag(request: Timetable_V1_DeleteTagRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_DeleteTagResponse>

    @discardableResult
    func rearrangeTags(request: Timetable_V1_RearrangeTagsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Timetable_V1_RearrangeTagsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func rearrangeTags(request: Timetable_V1_RearrangeTagsRequest, headers: Connect.Headers) async -> ResponseMessage<Timetable_V1_RearrangeTagsResponse>
}

/// Concrete implementation of `Timetable_V1_TimetableServiceClientInterface`.
public final class Timetable_V1_TimetableServiceClient: Timetable_V1_TimetableServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func listCoursesByCodes(request: Timetable_V1_ListCoursesByCodesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListCoursesByCodesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/ListCoursesByCodes", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listCoursesByCodes(request: Timetable_V1_ListCoursesByCodesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_ListCoursesByCodesResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/ListCoursesByCodes", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func searchCourses(request: Timetable_V1_SearchCoursesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_SearchCoursesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/SearchCourses", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func searchCourses(request: Timetable_V1_SearchCoursesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_SearchCoursesResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/SearchCourses", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func createRegisteredCoursesByCodes(request: Timetable_V1_CreateRegisteredCoursesByCodesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateRegisteredCoursesByCodesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/CreateRegisteredCoursesByCodes", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func createRegisteredCoursesByCodes(request: Timetable_V1_CreateRegisteredCoursesByCodesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_CreateRegisteredCoursesByCodesResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/CreateRegisteredCoursesByCodes", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func createRegisteredCourseManually(request: Timetable_V1_CreateRegisteredCourseManuallyRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateRegisteredCourseManuallyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/CreateRegisteredCourseManually", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func createRegisteredCourseManually(request: Timetable_V1_CreateRegisteredCourseManuallyRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_CreateRegisteredCourseManuallyResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/CreateRegisteredCourseManually", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func listRegisteredCourses(request: Timetable_V1_ListRegisteredCoursesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListRegisteredCoursesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/ListRegisteredCourses", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listRegisteredCourses(request: Timetable_V1_ListRegisteredCoursesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_ListRegisteredCoursesResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/ListRegisteredCourses", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func updateRegisteredCourse(request: Timetable_V1_UpdateRegisteredCourseRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_UpdateRegisteredCourseResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/UpdateRegisteredCourse", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func updateRegisteredCourse(request: Timetable_V1_UpdateRegisteredCourseRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_UpdateRegisteredCourseResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/UpdateRegisteredCourse", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func deleteRegisteredCourse(request: Timetable_V1_DeleteRegisteredCourseRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_DeleteRegisteredCourseResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/DeleteRegisteredCourse", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func deleteRegisteredCourse(request: Timetable_V1_DeleteRegisteredCourseRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_DeleteRegisteredCourseResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/DeleteRegisteredCourse", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func createTag(request: Timetable_V1_CreateTagRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_CreateTagResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/CreateTag", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func createTag(request: Timetable_V1_CreateTagRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_CreateTagResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/CreateTag", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func listTags(request: Timetable_V1_ListTagsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_ListTagsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/ListTags", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listTags(request: Timetable_V1_ListTagsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_ListTagsResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/ListTags", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func updateTag(request: Timetable_V1_UpdateTagRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_UpdateTagResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/UpdateTag", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func updateTag(request: Timetable_V1_UpdateTagRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_UpdateTagResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/UpdateTag", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func deleteTag(request: Timetable_V1_DeleteTagRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_DeleteTagResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/DeleteTag", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func deleteTag(request: Timetable_V1_DeleteTagRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_DeleteTagResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/DeleteTag", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func rearrangeTags(request: Timetable_V1_RearrangeTagsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Timetable_V1_RearrangeTagsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/timetable.v1.TimetableService/RearrangeTags", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func rearrangeTags(request: Timetable_V1_RearrangeTagsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Timetable_V1_RearrangeTagsResponse> {
        return await self.client.unary(path: "/timetable.v1.TimetableService/RearrangeTags", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let listCoursesByCodes = Connect.MethodSpec(name: "ListCoursesByCodes", service: "timetable.v1.TimetableService", type: .unary)
            public static let searchCourses = Connect.MethodSpec(name: "SearchCourses", service: "timetable.v1.TimetableService", type: .unary)
            public static let createRegisteredCoursesByCodes = Connect.MethodSpec(name: "CreateRegisteredCoursesByCodes", service: "timetable.v1.TimetableService", type: .unary)
            public static let createRegisteredCourseManually = Connect.MethodSpec(name: "CreateRegisteredCourseManually", service: "timetable.v1.TimetableService", type: .unary)
            public static let listRegisteredCourses = Connect.MethodSpec(name: "ListRegisteredCourses", service: "timetable.v1.TimetableService", type: .unary)
            public static let updateRegisteredCourse = Connect.MethodSpec(name: "UpdateRegisteredCourse", service: "timetable.v1.TimetableService", type: .unary)
            public static let deleteRegisteredCourse = Connect.MethodSpec(name: "DeleteRegisteredCourse", service: "timetable.v1.TimetableService", type: .unary)
            public static let createTag = Connect.MethodSpec(name: "CreateTag", service: "timetable.v1.TimetableService", type: .unary)
            public static let listTags = Connect.MethodSpec(name: "ListTags", service: "timetable.v1.TimetableService", type: .unary)
            public static let updateTag = Connect.MethodSpec(name: "UpdateTag", service: "timetable.v1.TimetableService", type: .unary)
            public static let deleteTag = Connect.MethodSpec(name: "DeleteTag", service: "timetable.v1.TimetableService", type: .unary)
            public static let rearrangeTags = Connect.MethodSpec(name: "RearrangeTags", service: "timetable.v1.TimetableService", type: .unary)
        }
    }
}
