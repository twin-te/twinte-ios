// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shared/option.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Shared_Authentication: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case unspecified // = 0
    case notRequred // = 1
    case optional // = 2
    case requred // = 3
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .notRequred
        case 2: self = .optional
        case 3: self = .requred
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .notRequred: return 1
        case .optional: return 2
        case .requred: return 3
        case let .UNRECOGNIZED(i): return i
        }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Shared_Authentication] = [
        .unspecified,
        .notRequred,
        .optional,
        .requred,
    ]
}

public struct Shared_TwinteMethodOptions: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var authentication: Shared_Authentication = .unspecified

    public var errorCodes: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

// MARK: - Extension support defined in option.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MethodOptions {
    public var Shared_twinte: Shared_TwinteMethodOptions {
        get { return getExtensionValue(ext: Shared_Extensions_twinte) ?? Shared_TwinteMethodOptions() }
        set { setExtensionValue(ext: Shared_Extensions_twinte, value: newValue) }
    }

    /// Returns true if extension `Shared_Extensions_twinte`
    /// has been explicitly set.
    public var hasShared_twinte: Bool {
        return hasExtensionValue(ext: Shared_Extensions_twinte)
    }

    /// Clears the value of extension `Shared_Extensions_twinte`.
    /// Subsequent reads from it will return its default value.
    public mutating func clearShared_twinte() {
        clearExtensionValue(ext: Shared_Extensions_twinte)
    }
}

// MARK: - File's ExtensionMap: Shared_Option_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Shared_Option_Extensions: SwiftProtobuf.SimpleExtensionMap = [
    Shared_Extensions_twinte,
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Shared_Extensions_twinte = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Shared_TwinteMethodOptions>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
    _protobuf_fieldNumber: 50000,
    fieldName: "shared.twinte"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "shared"

extension Shared_Authentication: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "AUTHENTICATION_UNSPECIFIED"),
        1: .same(proto: "NOT_REQURED"),
        2: .same(proto: "OPTIONAL"),
        3: .same(proto: "REQURED"),
    ]
}

extension Shared_TwinteMethodOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TwinteMethodOptions"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "authentication"),
        2: .standard(proto: "error_codes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &self.authentication)
            case 2: try decoder.decodeRepeatedStringField(value: &self.errorCodes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.authentication != .unspecified {
            try visitor.visitSingularEnumField(value: self.authentication, fieldNumber: 1)
        }
        if !self.errorCodes.isEmpty {
            try visitor.visitRepeatedStringField(value: self.errorCodes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Shared_TwinteMethodOptions, rhs: Shared_TwinteMethodOptions) -> Bool {
        if lhs.authentication != rhs.authentication { return false }
        if lhs.errorCodes != rhs.errorCodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
