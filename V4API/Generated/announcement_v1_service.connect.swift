// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: announcement/v1/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// The following error codes are not stated explicitly in the each rpc, but may be returned.
///   - shared.InvalidArgument
///   - shared.Unauthenticated
///   - shared.Unauthorized
public protocol Announcement_V1_AnnouncementServiceClientInterface: Sendable {
    @discardableResult
    func listAnnouncements(request: Announcement_V1_ListAnnouncementsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Announcement_V1_ListAnnouncementsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listAnnouncements(request: Announcement_V1_ListAnnouncementsRequest, headers: Connect.Headers) async -> ResponseMessage<Announcement_V1_ListAnnouncementsResponse>

    @discardableResult
    func readAnnouncements(request: Announcement_V1_ReadAnnouncementsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Announcement_V1_ReadAnnouncementsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func readAnnouncements(request: Announcement_V1_ReadAnnouncementsRequest, headers: Connect.Headers) async -> ResponseMessage<Announcement_V1_ReadAnnouncementsResponse>
}

/// Concrete implementation of `Announcement_V1_AnnouncementServiceClientInterface`.
public final class Announcement_V1_AnnouncementServiceClient: Announcement_V1_AnnouncementServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func listAnnouncements(request: Announcement_V1_ListAnnouncementsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Announcement_V1_ListAnnouncementsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/announcement.v1.AnnouncementService/ListAnnouncements", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listAnnouncements(request: Announcement_V1_ListAnnouncementsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Announcement_V1_ListAnnouncementsResponse> {
        return await self.client.unary(path: "/announcement.v1.AnnouncementService/ListAnnouncements", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func readAnnouncements(request: Announcement_V1_ReadAnnouncementsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Announcement_V1_ReadAnnouncementsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/announcement.v1.AnnouncementService/ReadAnnouncements", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func readAnnouncements(request: Announcement_V1_ReadAnnouncementsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Announcement_V1_ReadAnnouncementsResponse> {
        return await self.client.unary(path: "/announcement.v1.AnnouncementService/ReadAnnouncements", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let listAnnouncements = Connect.MethodSpec(name: "ListAnnouncements", service: "announcement.v1.AnnouncementService", type: .unary)
            public static let readAnnouncements = Connect.MethodSpec(name: "ReadAnnouncements", service: "announcement.v1.AnnouncementService", type: .unary)
        }
    }
}
