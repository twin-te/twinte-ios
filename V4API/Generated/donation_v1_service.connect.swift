// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: donation/v1/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// The following error codes are not stated explicitly in the each rpc, but may be returned.
///   - shared.InvalidArgument
///   - shared.Unauthenticated
///   - shared.Unauthorized
public protocol Donation_V1_DonationServiceClientInterface: Sendable {
    @discardableResult
    func createOneTimeCheckoutSession(request: Donation_V1_CreateOneTimeCheckoutSessionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_CreateOneTimeCheckoutSessionResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func createOneTimeCheckoutSession(request: Donation_V1_CreateOneTimeCheckoutSessionRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_CreateOneTimeCheckoutSessionResponse>

    @discardableResult
    func createSubscriptionCheckoutSession(request: Donation_V1_CreateSubscriptionCheckoutSessionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_CreateSubscriptionCheckoutSessionResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func createSubscriptionCheckoutSession(request: Donation_V1_CreateSubscriptionCheckoutSessionRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_CreateSubscriptionCheckoutSessionResponse>

    @discardableResult
    func getPaymentUser(request: Donation_V1_GetPaymentUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetPaymentUserResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func getPaymentUser(request: Donation_V1_GetPaymentUserRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_GetPaymentUserResponse>

    @discardableResult
    func updatePaymentUser(request: Donation_V1_UpdatePaymentUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_UpdatePaymentUserResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func updatePaymentUser(request: Donation_V1_UpdatePaymentUserRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_UpdatePaymentUserResponse>

    @discardableResult
    func listPaymentHistories(request: Donation_V1_ListPaymentHistoriesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListPaymentHistoriesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listPaymentHistories(request: Donation_V1_ListPaymentHistoriesRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_ListPaymentHistoriesResponse>

    @discardableResult
    func listSubscriptionPlans(request: Donation_V1_ListSubscriptionPlansRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListSubscriptionPlansResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listSubscriptionPlans(request: Donation_V1_ListSubscriptionPlansRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_ListSubscriptionPlansResponse>

    @discardableResult
    func getActiveSubscription(request: Donation_V1_GetActiveSubscriptionRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetActiveSubscriptionResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func getActiveSubscription(request: Donation_V1_GetActiveSubscriptionRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_GetActiveSubscriptionResponse>

    @discardableResult
    func unsubscribe(request: Donation_V1_UnsubscribeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_UnsubscribeResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func unsubscribe(request: Donation_V1_UnsubscribeRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_UnsubscribeResponse>

    @discardableResult
    func getTotalAmount(request: Donation_V1_GetTotalAmountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetTotalAmountResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func getTotalAmount(request: Donation_V1_GetTotalAmountRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_GetTotalAmountResponse>

    @discardableResult
    func listContributors(request: Donation_V1_ListContributorsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListContributorsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func listContributors(request: Donation_V1_ListContributorsRequest, headers: Connect.Headers) async -> ResponseMessage<Donation_V1_ListContributorsResponse>
}

/// Concrete implementation of `Donation_V1_DonationServiceClientInterface`.
public final class Donation_V1_DonationServiceClient: Donation_V1_DonationServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func createOneTimeCheckoutSession(request: Donation_V1_CreateOneTimeCheckoutSessionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_CreateOneTimeCheckoutSessionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/CreateOneTimeCheckoutSession", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func createOneTimeCheckoutSession(request: Donation_V1_CreateOneTimeCheckoutSessionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_CreateOneTimeCheckoutSessionResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/CreateOneTimeCheckoutSession", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func createSubscriptionCheckoutSession(request: Donation_V1_CreateSubscriptionCheckoutSessionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_CreateSubscriptionCheckoutSessionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/CreateSubscriptionCheckoutSession", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func createSubscriptionCheckoutSession(request: Donation_V1_CreateSubscriptionCheckoutSessionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_CreateSubscriptionCheckoutSessionResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/CreateSubscriptionCheckoutSession", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func getPaymentUser(request: Donation_V1_GetPaymentUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetPaymentUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/GetPaymentUser", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func getPaymentUser(request: Donation_V1_GetPaymentUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_GetPaymentUserResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/GetPaymentUser", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func updatePaymentUser(request: Donation_V1_UpdatePaymentUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_UpdatePaymentUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/UpdatePaymentUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func updatePaymentUser(request: Donation_V1_UpdatePaymentUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_UpdatePaymentUserResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/UpdatePaymentUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func listPaymentHistories(request: Donation_V1_ListPaymentHistoriesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListPaymentHistoriesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/ListPaymentHistories", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listPaymentHistories(request: Donation_V1_ListPaymentHistoriesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_ListPaymentHistoriesResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/ListPaymentHistories", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func listSubscriptionPlans(request: Donation_V1_ListSubscriptionPlansRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListSubscriptionPlansResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/ListSubscriptionPlans", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listSubscriptionPlans(request: Donation_V1_ListSubscriptionPlansRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_ListSubscriptionPlansResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/ListSubscriptionPlans", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func getActiveSubscription(request: Donation_V1_GetActiveSubscriptionRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetActiveSubscriptionResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/GetActiveSubscription", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func getActiveSubscription(request: Donation_V1_GetActiveSubscriptionRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_GetActiveSubscriptionResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/GetActiveSubscription", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func unsubscribe(request: Donation_V1_UnsubscribeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_UnsubscribeResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/Unsubscribe", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func unsubscribe(request: Donation_V1_UnsubscribeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_UnsubscribeResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/Unsubscribe", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func getTotalAmount(request: Donation_V1_GetTotalAmountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_GetTotalAmountResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/GetTotalAmount", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func getTotalAmount(request: Donation_V1_GetTotalAmountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_GetTotalAmountResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/GetTotalAmount", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    @discardableResult
    public func listContributors(request: Donation_V1_ListContributorsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Donation_V1_ListContributorsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/donation.v1.DonationService/ListContributors", idempotencyLevel: .noSideEffects, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func listContributors(request: Donation_V1_ListContributorsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Donation_V1_ListContributorsResponse> {
        return await self.client.unary(path: "/donation.v1.DonationService/ListContributors", idempotencyLevel: .noSideEffects, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let createOneTimeCheckoutSession = Connect.MethodSpec(name: "CreateOneTimeCheckoutSession", service: "donation.v1.DonationService", type: .unary)
            public static let createSubscriptionCheckoutSession = Connect.MethodSpec(name: "CreateSubscriptionCheckoutSession", service: "donation.v1.DonationService", type: .unary)
            public static let getPaymentUser = Connect.MethodSpec(name: "GetPaymentUser", service: "donation.v1.DonationService", type: .unary)
            public static let updatePaymentUser = Connect.MethodSpec(name: "UpdatePaymentUser", service: "donation.v1.DonationService", type: .unary)
            public static let listPaymentHistories = Connect.MethodSpec(name: "ListPaymentHistories", service: "donation.v1.DonationService", type: .unary)
            public static let listSubscriptionPlans = Connect.MethodSpec(name: "ListSubscriptionPlans", service: "donation.v1.DonationService", type: .unary)
            public static let getActiveSubscription = Connect.MethodSpec(name: "GetActiveSubscription", service: "donation.v1.DonationService", type: .unary)
            public static let unsubscribe = Connect.MethodSpec(name: "Unsubscribe", service: "donation.v1.DonationService", type: .unary)
            public static let getTotalAmount = Connect.MethodSpec(name: "GetTotalAmount", service: "donation.v1.DonationService", type: .unary)
            public static let listContributors = Connect.MethodSpec(name: "ListContributors", service: "donation.v1.DonationService", type: .unary)
        }
    }
}
