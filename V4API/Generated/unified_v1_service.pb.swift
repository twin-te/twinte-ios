// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unified/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct Unified_V1_GetByDateRequest: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var date: Shared_RFC3339FullDate {
        get { return _date ?? Shared_RFC3339FullDate() }
        set { _date = newValue }
    }

    /// Returns true if `date` has been explicitly set.
    public var hasDate: Bool { return self._date != nil }
    /// Clears the value of `date`. Subsequent reads from it will return its default value.
    public mutating func clearDate() { self._date = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _date: Shared_RFC3339FullDate? = nil
}

public struct Unified_V1_GetByDateResponse: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var events: [Schoolcalendar_V1_Event] = []

    public var module: Schoolcalendar_V1_Module = .unspecified

    public var registeredCourses: [Timetable_V1_RegisteredCourse] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "unified.v1"

extension Unified_V1_GetByDateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetByDateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "date"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &self._date)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._date {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Unified_V1_GetByDateRequest, rhs: Unified_V1_GetByDateRequest) -> Bool {
        if lhs._date != rhs._date { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Unified_V1_GetByDateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetByDateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "events"),
        2: .same(proto: "module"),
        3: .standard(proto: "registered_courses"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &self.events)
            case 2: try decoder.decodeSingularEnumField(value: &self.module)
            case 3: try decoder.decodeRepeatedMessageField(value: &self.registeredCourses)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.events.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
        }
        if self.module != .unspecified {
            try visitor.visitSingularEnumField(value: self.module, fieldNumber: 2)
        }
        if !self.registeredCourses.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.registeredCourses, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Unified_V1_GetByDateResponse, rhs: Unified_V1_GetByDateResponse) -> Bool {
        if lhs.events != rhs.events { return false }
        if lhs.module != rhs.module { return false }
        if lhs.registeredCourses != rhs.registeredCourses { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
